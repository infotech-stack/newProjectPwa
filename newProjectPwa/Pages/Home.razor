@page "/"
@inject NavigationManager NavigationManager;
@inject IUserService UserService;
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations
@using newProjectPwa.Services

@if (logout)
{
    <div class="container mt-5">
        <h2>Login</h2>
        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="username">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="@loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (!isAuthenticated && !string.IsNullOrEmpty(loginModel.Username) && !string.IsNullOrEmpty(loginModel.Password))
            {
                <div class="alert alert-danger mt-3">Invalid Username or Password. Please try again.</div>
            }
            <button type="submit" class="btn btn-primary mt-3">Login</button>
        </EditForm>
    </div>
}

@if (login)
{
    <div class="container mt-5">
        <h2>Welcome @username!</h2>
    </div>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isAuthenticated = false;
    private bool login = false;
    private bool logout = true;
    private string username = "";

    private void HandleValidSubmit()
    {
        isAuthenticated = AuthenticateUser(loginModel.Username, loginModel.Password);

        if (isAuthenticated)
        {
            username = loginModel.Username;
            login = true;
            logout = false;

            // Ensure state is updated immediately
            StateHasChanged();
        }
        else
        {
            // Clear sensitive data on failed login attempt
            loginModel.Password = string.Empty;
        }
    }

    private bool AuthenticateUser(string username, string password)
    {
        // Replace with your actual authentication logic
        return username == "rks" && password == "rks";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}